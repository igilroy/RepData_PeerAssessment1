install.packages("slidify")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggplot2", unload=TRUE)
par(mfrow = c(2, 1))  ## Specify that plots will be arranged in 2 rows of 1 plots
install.packages("dplyr")
library(dplyr)
## Read in the Activity data
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
## Calculate the total number of steps taken each day
### Group by day and sum each group
daily.activity<-select(activity.data,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
## Create a histogram plot with minimal formatting
par(mfrow = c(1, 1))  ## Specify that plots will be arranged in 1 rows of 1 plots
with(daily.activity,hist(steps,col="red",main="Histogram of Total Steps",
xlab="Steps", breaks=100 ))
with(daily.activity,rug(steps))
## Calculate mean and median
mean.steps <- colMeans(daily.activity[,2],na.rm=TRUE)
median.steps <- apply(X = daily.activity[,2], MARGIN=2, FUN = median, na.rm = TRUE)
print(paste("Mean steps taken: ",as.numeric(mean.steps),sep=" "))
#print(as.numeric(mean.steps))
print(paste("Median steps taken: ",as.numeric(median.steps),sep=" "))
#print(as.numeric(median.steps))
## Add to plot
abline(v=mean.steps, col="navy",lwd=5)
abline(v=median.steps,col="purple",lwd=5,lty=2)
legend("topright", pch = "-", lwd=3, col = c("navy", "purple"), bty="n",
legend = c("Mean", "Median"))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
## Calculate the total number of steps taken each day
### Group by day and sum each group
daily.activity<-select(activity.data,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
setwd("~/Dropbox/Data Science/datasciencecoursera/RR/RepData_PeerAssessment1")
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
## Calculate the total number of steps taken each day
### Group by day and sum each group
daily.activity<-select(activity.data,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
par(mfrow = c(1, 1))  ## Specify that plots will be arranged in 1 rows of 1 plots
with(daily.activity,hist(steps,col="red",main="Histogram of Total Steps",
xlab="Steps", breaks=100 ))
with(daily.activity,rug(steps))
## Calculate mean and median
mean.steps <- colMeans(daily.activity[,2],na.rm=TRUE)
median.steps <- apply(X = daily.activity[,2], MARGIN=2, FUN = median, na.rm = TRUE)
print(paste("Mean steps taken: ",as.numeric(mean.steps),sep=" "))
#print(as.numeric(mean.steps))
print(paste("Median steps taken: ",as.numeric(median.steps),sep=" "))
#print(as.numeric(median.steps))
## Add to plot
abline(v=mean.steps, col="navy",lwd=5)
abline(v=median.steps,col="purple",lwd=5,lty=2)
legend("topright", pch = "-", lwd=3, col = c("navy", "purple"), bty="n",
legend = c("Mean", "Median"))
interval.activity<-select(activity.data,interval,steps)  ## subset data to just the columns we need
interval.activity <- group_by(interval.activity,interval)  ##  Group data by 5-minute time interval
### Calculate the mean for each interval
interval.activity <- summarise_each(interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
### Plot time series graph
#####  Need to get the X axis to use interval values
with(interval.activity,plot(steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval",
xlab="Time Interval", ylab="Mean Steps"  ))
max.steps <-max(interval.activity[,2])
max.ints<-interval.activity[,2] == max.steps
max.interval<-interval.activity[max.ints,1]
print(paste("Maximum average number of steps:", max.steps,sep=" "))
#print(max.steps)
print(paste("Occurred during interval(s):",max.interval,sep=" "))
#print(max.interval)
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
## Calculate and report the total number of missing values in the dataset
## (i.e. the total number of rows with 𝙽𝙰)
# missing.steps<-is.na(activity.data[,1])
print(paste("Number of missing values is:",sum(is.na(activity.data[,1])),sep=" "))
interval.activity<-select(activity.data,interval,steps)  ## subset data to just the columns we need
interval.activity <- group_by(interval.activity,interval)  ##  Group data by 5-minute time interval
### Calculate the mean for each interval
interval.activity <- summarise_each(interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
activity.data.imputed <- activity.data
### For each entry where "steps" value is missing, assign the mean vale for that interval
##  (There is probably a more elegant way to do this but this will work to start with)
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (is.na(activity.data.imputed[iptr,1])) {     ## if "steps" data is missing ...
#print(iptr)
index<-interval.activity[,1]==activity.data.imputed[iptr,3]         ## get the interval as index
#print(index)
activity.data.imputed[iptr,1]<-interval.activity[index,2]       ## substitute "NA" with mean for that interval
#print(interval.activity[index,2])
}
}
daily.activity<-select(activity.data.imputed,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
with(daily.activity,hist(steps,col="red",main="Histogram of Total Steps",
xlab="Steps", breaks=100 ))
with(daily.activity,rug(steps))
mean.steps <- colMeans(daily.activity[,2],na.rm=TRUE)
median.steps <- apply(X = daily.activity[,2], MARGIN=2, FUN = median, na.rm = TRUE)
print(paste("Mean steps taken: ",(as.numeric(mean.steps)),sep=" "))
print(paste("Median steps taken: ",(as.numeric(median.steps)),sep=" "))
abline(v=mean.steps, col="navy",lwd=5)
abline(v=median.steps,col="purple",lwd=5,lty=2)
legend("topright", pch = "-", lwd=3, col = c("navy", "purple"), bty="n",
legend = c("Mean", "Median"))
activity.data.imputed<-mutate(activity.data.imputed, day=(weekdays(date)))
### For each entry determine if it occurs on a weekend or week day and label accordingly
##  (There is probably a more elegant way to do this but this will work to start with)
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (grepl("^S",activity.data.imputed[iptr,4])) {     ## is it a Saturday or Sunday?
activity.data.imputed[iptr,4]<- "weekend"       ## if so label as "weekend"
} else {
activity.data.imputed[iptr,4]<- "weekday"       ## if not label as "weekday"
}
}
activity.data.imputed<-mutate(activity.data.imputed, day=(weekdays(date)))
## Create a panel plot containing a time series plot of the 5-minute interval
## (x-axis) and the average number of steps taken, averaged across all weekday days
## or weekend days (y-axis).
### Seperate weekday and weekend data
weekday.activity <- filter(activity.data.imputed, day=="weekday")
weekend.activity <- filter(activity.data.imputed, day=="weekend")
weekday.interval.activity<-select(weekday.activity,interval,steps)  ## subset data to just the columns we need
weekday.interval.activity <- group_by(weekday.interval.activity,interval)  ##  Group data by 5-minute time interval
weekend.interval.activity<-select(weekend.activity,interval,steps)  ## subset data to just the columns we need
weekend.interval.activity <- group_by(weekend.interval.activity,interval)  ##  Group data by 5-minute time interval
### Calculate the mean for each interval
weekday.interval.activity <- summarise_each(weekday.interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
weekend.interval.activity <- summarise_each(weekend.interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
par(mfrow = c(2, 1))  ## Specify that plots will be arranged in 2 rows of 1 plots
#####  Need to get the X axis to use interval values
with(weekday.interval.activity,plot(steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekdays",
xlab="Time Interval", ylab="Mean Steps"  ))
with(weekend.interval.activity,plot(steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekends",
xlab="Time Interval", ylab="Mean Steps"  ))
View(activity.data)
library(dplyr)
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
print(paste("Number of missing values is:",sum(is.na(activity.data[,1])),sep=" "))
interval.activity<-select(activity.data,interval,steps)  ## subset data to just the columns we need
interval.activity <- group_by(interval.activity,interval)  ##  Group data by 5-minute time interval
interval.activity <- summarise_each(interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
activity.data.imputed <- activity.data
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (is.na(activity.data.imputed[iptr,1])) {     ## if "steps" data is missing ...
#print(iptr)
index<-interval.activity[,1]==activity.data.imputed[iptr,3]         ## get the interval as index
#print(index)
activity.data.imputed[iptr,1]<-interval.activity[index,2]       ## substitute "NA" with mean for that interval
#print(interval.activity[index,2])
}
}
head(activity.data.imputed)
daily.activity<-select(activity.data.imputed,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
with(daily.activity,hist(steps,col="red",main="Histogram of Total Steps",
xlab="Steps", breaks=100 ))
with(daily.activity,rug(steps))
## Calculate mean and median
mean.steps <- colMeans(daily.activity[,2],na.rm=TRUE)
median.steps <- apply(X = daily.activity[,2], MARGIN=2, FUN = median, na.rm = TRUE)
print(paste("Mean steps taken: ",(as.numeric(mean.steps)),sep=" "))
print(paste("Median steps taken: ",(as.numeric(median.steps)),sep=" "))
abline(v=mean.steps, col="navy",lwd=5)
abline(v=median.steps,col="purple",lwd=5,lty=2)
legend("topright", pch = "-", lwd=3, col = c("navy", "purple"), bty="n",
legend = c("Mean", "Median"))
activity.data.imputed<-mutate(activity.data.imputed, day=(weekdays(date)))
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (grepl("^S",activity.data.imputed[iptr,4])) {     ## is it a Saturday or Sunday?
activity.data.imputed[iptr,4]<- "weekend"       ## if so label as "weekend"
} else {
activity.data.imputed[iptr,4]<- "weekday"       ## if not label as "weekday"
}
}
head(activity.data.imputed)
activity.data.imputed<-mutate(activity.data.imputed, day=(weekdays(date)))
str(activity.data.imputed)
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (grepl("^S",activity.data.imputed[iptr,4])) {     ## is it a Saturday or Sunday?
activity.data.imputed[iptr,4]<- "weekend"       ## if so label as "weekend"
} else {
activity.data.imputed[iptr,4]<- "weekday"       ## if not label as "weekday"
}
}
str(activity.data.imputed)
activity.data.imputed<-mutate(activity.data.imputed, as.factor(day))
str(activity.data.imputed)
weekday.activity <- filter(activity.data.imputed, day=="weekday")
weekend.activity <- filter(activity.data.imputed, day=="weekend")
weekday.interval.activity<-select(weekday.activity,interval,steps)  ## subset data to just the columns we need
weekday.interval.activity <- group_by(weekday.interval.activity,interval)  ##  Group data by 5-minute time interval
weekend.interval.activity<-select(weekend.activity,interval,steps)  ## subset data to just the columns we need
weekend.interval.activity <- group_by(weekend.interval.activity,interval)  ##  Group data by 5-minute time interval
weekday.interval.activity <- summarise_each(weekday.interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
weekend.interval.activity <- summarise_each(weekend.interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
par(mfrow = c(2, 1))  ## Specify that plots will be arranged in 2 rows of 1 plots
#####  Need to get the X axis to use interval values
with(weekday.interval.activity,plot(steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekdays",
xlab="Time Interval", ylab="Mean Steps"  ))
with(weekend.interval.activity,plot(steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekends",
xlab="Time Interval", ylab="Mean Steps"  ))
head(interval.activity)
par(mfrow = c(1, 1))  ## Specify that plots will be arranged in 1 rows of 1 plots
with(interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval",
xlab="Time Interval", ylab="Mean Steps"  ))
par(mfrow = c(2, 1))  ## Specify that plots will be arranged in 2 rows of 1 plots
#####  Need to get the X axis to use interval values
with(weekday.interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekdays",
xlab="Time Interval", ylab="Mean Steps"  ))
with(weekend.interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekends",
xlab="Time Interval", ylab="Mean Steps"  ))
#
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
## Calculate the total number of steps taken each day
### Group by day and sum each group
daily.activity<-select(activity.data,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
## Create a histogram plot with minimal formatting
par(mfrow = c(1, 1))  ## Specify that plots will be arranged in 1 rows of 1 plots
png(filename="figure/Plot1-Hist-Total.png")   ## Open the output file
with(daily.activity,hist(steps,col="red",main="Histogram of Total Steps",
xlab="Steps", breaks=100 ))
with(daily.activity,rug(steps))
### Calculate mean and median
mean.steps <- colMeans(daily.activity[,2],na.rm=TRUE)
median.steps <- apply(X = daily.activity[,2], MARGIN=2, FUN = median, na.rm = TRUE)
### Add to plot
abline(v=mean.steps, col="navy",lwd=5)
abline(v=median.steps,col="purple",lwd=5,lty=2)
legend("topright", pch = "-", lwd=3, col = c("navy", "purple"), bty="n",
legend = c("Mean", "Median"))
dev.off()    ##  Close the output file
## Print the mean and median total steps taken
print(paste("Mean steps taken: ",as.numeric(mean.steps),sep=" "))
print(paste("Median steps taken: ",as.numeric(median.steps),sep=" "))
## Create a time series plot of the 5-minute interval (x-axis) and the average
## number of steps taken, averaged across all days (y-axis)
### Group data based on interval
interval.activity<-select(activity.data,interval,steps)  ## subset data to just the columns we need
interval.activity <- group_by(interval.activity,interval)  ##  Group data by 5-minute time interval
### Calculate the mean for each interval
interval.activity <- summarise_each(interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
### Plot time series graph
#####  Need to get the X axis to use interval values
png(filename="figure/Plot2-Time-Mean.png")   ## Open the output file
with(interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval",
xlab="Time Interval", ylab="Mean Steps"  ))
dev.off()    ##  Close the output file
## Determine which 5-minute interval contains the maximum number of steps
max.steps <-max(interval.activity[,2])
max.ints<-interval.activity[,2] == max.steps
max.interval<-interval.activity[max.ints,1]
print(paste("Maximum average number of steps:", max.steps,sep=" "))
print(paste("Occurred during interval(s):",max.interval,sep=" "))
activity.data <- read.table("../data/activity.csv",sep=",",
colClasses=c("integer","Date","integer"),
header=TRUE)
## Calculate and report the total number of missing values in the dataset
## (i.e. the total number of rows with 𝙽𝙰)
# missing.steps<-is.na(activity.data[,1])
print(paste("Number of missing values is:",sum(is.na(activity.data[,1])),sep=" "))
## Create a new dataset by filling in all of the missing values in the dataset.
## This is achieved by using the mean for that 5-minute interval.
### Calculate the mean values for each interval
### Group data based on interval
interval.activity<-select(activity.data,interval,steps)  ## subset data to just the columns we need
interval.activity <- group_by(interval.activity,interval)  ##  Group data by 5-minute time interval
### Calculate the mean for each interval
interval.activity <- summarise_each(interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
###  Copy original data table to new table
activity.data.imputed <- activity.data
### For each entry where "steps" value is missing, assign the mean vale for that interval
##  (There is probably a more elegant way to do this but this will work to start with)
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (is.na(activity.data.imputed[iptr,1])) {     ## if "steps" data is missing ...
#print(iptr)
index<-interval.activity[,1]==activity.data.imputed[iptr,3]         ## get the interval as index
#print(index)
activity.data.imputed[iptr,1]<-interval.activity[index,2]       ## substitute "NA" with mean for that interval
#print(interval.activity[index,2])
}
}
## Calculate the total number of steps taken each day
## Group by day and sum each group
daily.activity<-select(activity.data.imputed,date,steps)  ## subset data to just the columns we need
daily.activity <- group_by(daily.activity,date)  ##  Group data by date
daily.activity <- summarise_each(daily.activity,funs(sum(steps)))  ## sum the data for each date
## Create a histogram plot with minimal formatting
par(mfrow = c(1, 1))  ## Specify that plots will be arranged in 1 rows of 1 plots
png(filename="figure/Plot3-Hist-Total-Imputed.png")   ## Open the output file
with(daily.activity,hist(steps,col="red",main="Histogram of Total Steps",
xlab="Steps", breaks=100 ))
with(daily.activity,rug(steps))
## Calculate mean and median
mean.steps <- colMeans(daily.activity[,2],na.rm=TRUE)
median.steps <- apply(X = daily.activity[,2], MARGIN=2, FUN = median, na.rm = TRUE)
## Add to plot
abline(v=mean.steps, col="navy",lwd=5)
abline(v=median.steps,col="purple",lwd=5,lty=2)
legend("topright", pch = "-", lwd=3, col = c("navy", "purple"), bty="n",
legend = c("Mean", "Median"))
dev.off()    ##  Close the output file
## Print the mean and median total steps taken
print(paste("Mean steps taken: ",(as.numeric(mean.steps)),sep=" "))
print(paste("Median steps taken: ",(as.numeric(median.steps)),sep=" "))
##  Creates a new factor variable in the dataset with two
##  levels: “weekday” and “weekend” indicating whether a given
## date is a weekday or weekend day.
### add a column called "day" based on "date" field
activity.data.imputed<-mutate(activity.data.imputed, day=(weekdays(date)))
### For each entry determine if it occurs on a weekend or week day and label accordingly
##  (There is probably a more elegant way to do this but this will work to start with)
for ( iptr in 1:nrow(activity.data.imputed)) {          ## for each row in the data file
if (grepl("^S",activity.data.imputed[iptr,4])) {     ## is it a Saturday or Sunday?
activity.data.imputed[iptr,4]<- "weekend"       ## if so label as "weekend"
} else {
activity.data.imputed[iptr,4]<- "weekday"       ## if not label as "weekday"
}
}
### convert "day" column to a factor
activity.data.imputed<-mutate(activity.data.imputed, as.factor(day))
## Create a panel plot containing a time series plot of the 5-minute interval
## (x-axis) and the average number of steps taken, averaged across all weekday days
## or weekend days (y-axis).
### Seperate weekday and weekend data
weekday.activity <- filter(activity.data.imputed, day=="weekday")
weekend.activity <- filter(activity.data.imputed, day=="weekend")
### group each by 5 minute interval and calculate average number of steps per interval
weekday.interval.activity<-select(weekday.activity,interval,steps)  ## subset data to just the columns we need
weekday.interval.activity <- group_by(weekday.interval.activity,interval)  ##  Group data by 5-minute time interval
weekend.interval.activity<-select(weekend.activity,interval,steps)  ## subset data to just the columns we need
weekend.interval.activity <- group_by(weekend.interval.activity,interval)  ##  Group data by 5-minute time interval
### Calculate the mean for each interval
weekday.interval.activity <- summarise_each(weekday.interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
weekend.interval.activity <- summarise_each(weekend.interval.activity,funs(mean(steps, na.rm=TRUE)))  ## sum the data for each date
### Create panel plot
par(mfrow = c(2, 1))  ## Specify that plots will be arranged in 2 rows of 1 plots
#####  Need to get the X axis to use interval values
png(filename="figure/Plot4-Time-Mean-Imputed.png")   ## Open the output file
with(weekday.interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekdays",
xlab="Time Interval", ylab="Mean Steps"  ))
with(weekend.interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekends",
xlab="Time Interval", ylab="Mean Steps"  ))
dev.off()    ##  Close the output file
png(filename="figure/Plot4-Time-Mean-Imputed.png")   ## Open the output file
par(mfrow = c(2, 1))  ## Specify that plots will be arranged in 2 rows of 1 plots
with(weekday.interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekdays",
xlab="Time Interval", ylab="Mean Steps"  ))
with(weekend.interval.activity,plot(interval,steps,col="red", type="l",
main="Average (Mean) Steps per 5-minute Time Interval During Weekends",
xlab="Time Interval", ylab="Mean Steps"  ))
dev.off()    ##  Close the output file
install.packages("knitr")
install.packages("markdown")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages(c("BH", "class", "curl", "devtools", "digest", "fields", "foreign", "ggplot2", "git2r", "jsonlite", "lubridate", "maps", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "R6", "Rcpp", "rJava", "RMySQL", "roxygen2", "rstudioapi", "scales", "spatial", "stringi", "testthat", "xml2"))
